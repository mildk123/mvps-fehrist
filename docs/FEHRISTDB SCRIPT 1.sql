CREATE DATABASE FEHRISTDB
USE FEHRISTDB

--CREATE TABLE ROLES(
--ROLEID INT IDENTITY,
--NAME VARCHAR(50) NOT NULL,
--DATE_CREATED VARCHAR(50) NOT NULL,
--DATE_UPDATED VARCHAR(50),
--)

CREATE TABLE ROLES(
ROLEID INT IDENTITY PRIMARY KEY,
NAME VARCHAR(50) NOT NULL,
CREATED_BY varchar(50) CONSTRAINT df_CREATED_BY DEFAULT original_login(),
DATE_CREATED datetime CONSTRAINT df_DATE_CREATED DEFAULT getdate(),
UPDATE_BY varchar(50) CONSTRAINT df_UPDATE_BY DEFAULT original_login(),
DATE_UPDATED datetime CONSTRAINT df_DATE_UPDATED DEFAULT getdate()
)


GO
CREATE TRIGGER upd_AuditColumns
ON dbo.ROLES AFTER UPDATE
AS
BEGIN
    IF UPDATE(UPDATE_BY) AND UPDATE(DATE_UPDATED)
        RETURN
  
    UPDATE ROLES
        SET UPDATE_BY = DEFAULT,
            DATE_UPDATED = DEFAULT
    FROM ROLES
    JOIN Inserted
        ON ROLES.ROLEID = Inserted.ROLEID
END;
GO

-------------------------------------------------------------------------
CREATE TABLE ACCOUNTS(
ACCOUNTID INT IDENTITY PRIMARY KEY,
ROLEID INT FOREIGN KEY REFERENCES ROLES (ROLEID),
NAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(50) NOT NULL UNIQUE,
PASS TEXT NOT NULL,
PHONE VARCHAR(50),
AC_STATUS VARCHAR(50),
CREATED_BY varchar(50) CONSTRAINT df_ACCOUNTS_CREATED_BY DEFAULT original_login(),
DATE_CREATED datetime CONSTRAINT df_ACCOUNTS_DATE_CREATED DEFAULT getdate(),
UPDATE_BY varchar(50) CONSTRAINT df_ACCOUNTS_UPDATE_BY DEFAULT original_login(),
DATE_UPDATED datetime CONSTRAINT df_ACCOUNTS_DATE_UPDATED DEFAULT getdate()
)
GO
CREATE TRIGGER upd_ACCOUNTS
ON dbo.ACCOUNTS AFTER UPDATE
AS
BEGIN
    IF UPDATE(UPDATE_BY) AND UPDATE(DATE_UPDATED)
        RETURN
  
    UPDATE ACCOUNTS
        SET UPDATE_BY = DEFAULT,
            DATE_UPDATED = DEFAULT
    FROM ACCOUNTS
    JOIN Inserted
        ON ACCOUNTS.ACCOUNTID = ACCOUNTS.ACCOUNTID
END;
GO

-------------------------------------------------------------------------

CREATE TABLE TASKS (
TASKID INT IDENTITY PRIMARY KEY,
ACCOUNTID INT FOREIGN KEY REFERENCES ACCOUNTS(ACCOUNTID),
T_TITLE TEXT,
T_DESC TEXT,
T_STATUS VARCHAR(50),
T_COLOR VARCHAR(50),
T_DUE_DATE_TIME VARCHAR(50),
T_ADDED_DATE_TIME VARCHAR(50),
CREATED_BY varchar(50) CONSTRAINT df_TASKS_CREATED_BY DEFAULT original_login(),
DATE_CREATED datetime CONSTRAINT df_TASKS_DATE_CREATED DEFAULT getdate(),
UPDATE_BY varchar(50) CONSTRAINT df_TASKS_UPDATE_BY DEFAULT original_login(),
DATE_UPDATED datetime CONSTRAINT df_TASKS_DATE_UPDATED DEFAULT getdate()
)
GO
CREATE TRIGGER upd_TASKS
ON dbo.TASKS AFTER UPDATE
AS
BEGIN
    IF UPDATE(UPDATE_BY) AND UPDATE(DATE_UPDATED)
        RETURN
  
    UPDATE TASKS
        SET UPDATE_BY = DEFAULT,
            DATE_UPDATED = DEFAULT
    FROM TASKS
    JOIN Inserted
        ON TASKS.TASKID = TASKS.TASKID
END;
GO

-------------------------------------------------------------------------
-------------------------------------------------------------------------

CREATE TABLE TASK_IMAGES (
IMAGEID INT IDENTITY PRIMARY KEY,
TI_PATH TEXT,
TASKID INT FOREIGN KEY REFERENCES TASKS (TASKID),
CREATED_BY varchar(50) CONSTRAINT df_TASK_IMAGES_CREATED_BY DEFAULT original_login(),
DATE_CREATED datetime CONSTRAINT df_TASK_IMAGES_DATE_CREATED DEFAULT getdate(),
UPDATE_BY varchar(50) CONSTRAINT df_TASK_IMAGES_UPDATE_BY DEFAULT original_login(),
DATE_UPDATED datetime CONSTRAINT df_TASK_IMAGES_DATE_UPDATED DEFAULT getdate()
)
GO
CREATE TRIGGER upd_TASK_IMAGES
ON dbo.TASK_IMAGES AFTER UPDATE
AS
BEGIN
    IF UPDATE(UPDATE_BY) AND UPDATE(DATE_UPDATED)
        RETURN
  
    UPDATE TASK_IMAGES
        SET UPDATE_BY = DEFAULT,
            DATE_UPDATED = DEFAULT
    FROM TASK_IMAGES
    JOIN Inserted
        ON TASK_IMAGES.IMAGEID = TASK_IMAGES.IMAGEID
END;
GO

-------------------------------------------------------------------------